{"ast":null,"code":"import _regeneratorRuntime from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _excluded = [\"confirmPassword\"];\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nexport default {\n  data: function data() {\n    var _this = this;\n    // 密码确认验证\n    var validateConfirmPassword = function validateConfirmPassword(rule, value, callback) {\n      if (value !== _this.form.password) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      form: {\n        username: '',\n        phone: '',\n        password: '',\n        confirmPassword: '',\n        gender: '1',\n        birthday: ''\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入姓名',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 20,\n          message: '长度在 2 到 20 个字符',\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'blur'\n        }, {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入正确的手机号',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度不能小于6位',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请再次输入密码',\n          trigger: 'blur'\n        }, {\n          validator: validateConfirmPassword,\n          trigger: 'blur'\n        }],\n        gender: [{\n          required: true,\n          message: '请选择性别',\n          trigger: 'change'\n        }],\n        birthday: [{\n          required: true,\n          message: '请选择出生日期',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  methods: {\n    handleRegister: function handleRegister() {\n      var _this2 = this;\n      this.$refs.registerForm.validate(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(valid) {\n          var _this2$form, confirmPassword, registerData, formattedData, _yield$_this2$$http$p, data;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (!valid) {\n                  _context.next = 15;\n                  break;\n                }\n                _context.prev = 1;\n                _this2$form = _this2.form, confirmPassword = _this2$form.confirmPassword, registerData = _objectWithoutProperties(_this2$form, _excluded); // 转换日期格式\n                formattedData = _objectSpread(_objectSpread({}, registerData), {}, {\n                  birthday: registerData.birthday ? new Date(registerData.birthday).toISOString() : null\n                });\n                _context.next = 6;\n                return _this2.$http.post('/api/patient/register', formattedData);\n              case 6:\n                _yield$_this2$$http$p = _context.sent;\n                data = _yield$_this2$$http$p.data;\n                if (data.code === 200) {\n                  _this2.$message.success('注册成功');\n                  _this2.$router.push('/login');\n                } else {\n                  _this2.$message.error(data.message || '注册失败');\n                }\n                _context.next = 15;\n                break;\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                console.error('注册错误:', _context.t0);\n                _this2.$message.error('注册失败，请稍后重试');\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[1, 11]]);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};","map":{"version":3,"names":["data","_this","validateConfirmPassword","rule","value","callback","form","password","Error","username","phone","confirmPassword","gender","birthday","rules","required","message","trigger","min","max","pattern","validator","methods","handleRegister","_this2","$refs","registerForm","validate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","valid","_this2$form","registerData","formattedData","_yield$_this2$$http$p","wrap","_callee$","_context","prev","next","_objectWithoutProperties","_excluded","_objectSpread","Date","toISOString","$http","post","sent","code","$message","success","$router","push","error","t0","console","stop","_x","apply","arguments"],"sources":["src/views/Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <el-card class=\"register-card\">\r\n      <div class=\"title\">用户注册</div>\r\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"registerForm\" label-width=\"80px\">\r\n        <el-form-item label=\"姓名\" prop=\"username\">\r\n          <el-input v-model=\"form.username\" placeholder=\"请输入姓名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"手机号\" prop=\"phone\">\r\n          <el-input v-model=\"form.phone\" placeholder=\"请输入手机号\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input type=\"password\" v-model=\"form.password\" placeholder=\"请输入密码\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\r\n          <el-input type=\"password\" v-model=\"form.confirmPassword\" placeholder=\"请再次输入密码\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\" prop=\"gender\">\r\n          <el-radio-group v-model=\"form.gender\">\r\n            <el-radio label=\"1\">男</el-radio>\r\n            <el-radio label=\"0\">女</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"出生日期\" prop=\"birthday\">\r\n          <el-date-picker v-model=\"form.birthday\" type=\"date\" placeholder=\"选择日期\"></el-date-picker>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" class=\"register-button\" @click=\"handleRegister\">注册</el-button>\r\n          <el-button class=\"login-button\" @click=\"$router.push('/login')\">返回登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    // 密码确认验证\r\n    const validateConfirmPassword = (rule, value, callback) => {\r\n      if (value !== this.form.password) {\r\n        callback(new Error('两次输入的密码不一致'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      form: {\r\n        username: '',\r\n        phone: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        gender: '1',\r\n        birthday: ''\r\n      },\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入姓名', trigger: 'blur' },\r\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\r\n        ],\r\n        phone: [\r\n          { required: true, message: '请输入手机号', trigger: 'blur' },\r\n          { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n          { min: 6, message: '密码长度不能小于6位', trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { required: true, message: '请再次输入密码', trigger: 'blur' },\r\n          { validator: validateConfirmPassword, trigger: 'blur' }\r\n        ],\r\n        gender: [\r\n          { required: true, message: '请选择性别', trigger: 'change' }\r\n        ],\r\n        birthday: [\r\n          { required: true, message: '请选择出生日期', trigger: 'change' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleRegister() {\r\n      this.$refs.registerForm.validate(async valid => {\r\n        if (valid) {\r\n          try {\r\n            const { confirmPassword, ...registerData } = this.form\r\n            // 转换日期格式\r\n            const formattedData = {\r\n              ...registerData,\r\n              birthday: registerData.birthday ? new Date(registerData.birthday).toISOString() : null\r\n            }\r\n            const { data } = await this.$http.post('/api/patient/register', formattedData)\r\n            if (data.code === 200) {\r\n              this.$message.success('注册成功')\r\n              this.$router.push('/login')\r\n            } else {\r\n              this.$message.error(data.message || '注册失败')\r\n            }\r\n          } catch (error) {\r\n            console.error('注册错误:', error)\r\n            this.$message.error('注册失败，请稍后重试')\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #f0f2f5;\r\n}\r\n\r\n.register-card {\r\n  width: 500px;\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 30px;\r\n  color: #409EFF;\r\n}\r\n\r\n.register-button {\r\n  width: 45%;\r\n}\r\n\r\n.login-button {\r\n  width: 45%;\r\n  margin-left: 10%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}