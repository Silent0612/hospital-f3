{"ast":null,"code":"import _regeneratorRuntime from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/hospital-master2/hospital-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nexport default {\n  data: function data() {\n    return {\n      loading: false,\n      records: [],\n      currentPage: 1,\n      total: 0,\n      timeSlots: {\n        'morning': '上午',\n        'afternoon': '下午',\n        'evening': '晚上',\n        '1': '上午',\n        '2': '下午',\n        '3': '晚上'\n      }\n    };\n  },\n  created: function created() {\n    this.getRecords();\n  },\n  methods: {\n    getRecords: function getRecords() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var userInfo, response, _response$data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.prev = 1;\n              userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');\n              console.log('当前用户信息:', userInfo);\n              if (userInfo.id) {\n                _context.next = 9;\n                break;\n              }\n              _this.$message.error('请先登录');\n              _this.$router.push('/home/login');\n              _this.$router.push('/login');\n              return _context.abrupt(\"return\");\n            case 9:\n              _context.next = 11;\n              return _this.$http.get(\"/api/appointments/user/\".concat(userInfo.id));\n            case 11:\n              response = _context.sent;\n              console.log('预约记录响应:', response);\n              if (response.data && response.data.code === 200) {\n                if (Array.isArray(response.data.data)) {\n                  _this.records = response.data.data;\n                  _this.total = _this.records.length;\n                  console.log('获取到的预约记录:', _this.records);\n                } else {\n                  console.error('返回的数据不是数组:', response.data.data);\n                  _this.records = [];\n                  _this.total = 0;\n                }\n              } else {\n                _this.$message.error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || '获取预约记录失败');\n              }\n              _context.next = 20;\n              break;\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取预约记录错误:', _context.t0);\n              _this.$message.error('获取预约记录失败，请稍后重试');\n            case 20:\n              _context.prev = 20;\n              _this.loading = false;\n              return _context.finish(20);\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 16, 20, 23]]);\n      }))();\n    },\n    formatDate: function formatDate(date) {\n      if (!date) return '';\n      var d = new Date(date);\n      return \"\".concat(d.getFullYear(), \"-\").concat(String(d.getMonth() + 1).padStart(2, '0'), \"-\").concat(String(d.getDate()).padStart(2, '0'));\n    },\n    getTimeSlotLabel: function getTimeSlotLabel(timeSlot) {\n      return this.timeSlots[timeSlot] || '未知时段';\n    },\n    getStatusType: function getStatusType(status) {\n      var types = {\n        0: 'info',\n        // 待就诊\n        1: 'success',\n        // 已完成\n        2: 'danger' // 已取消\n      };\n      return types[status] || 'info';\n    },\n    getStatusLabel: function getStatusLabel(status) {\n      var labels = {\n        0: '待就诊',\n        1: '已完成',\n        2: '已取消'\n      };\n      return labels[status] || '未知状态';\n    },\n    canCancel: function canCancel(record) {\n      return record.status === 0 && new Date(record.appointmentDate) > new Date();\n    },\n    handleCurrentChange: function handleCurrentChange(page) {\n      this.currentPage = page;\n      this.getRecords();\n    },\n    handleCancel: function handleCancel(record) {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, _response$data2;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _this2.$confirm('确认取消该预约吗？', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n              });\n            case 3:\n              _context2.next = 5;\n              return _this2.$http.put(\"/api/appointments/\".concat(record.id, \"/cancel\"));\n            case 5:\n              response = _context2.sent;\n              if (response.data && response.data.code === 200) {\n                _this2.$message.success('取消预约成功');\n                _this2.getRecords();\n              } else {\n                _this2.$message.error(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message) || '取消预约失败');\n              }\n              _context2.next = 12;\n              break;\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              if (_context2.t0 !== 'cancel') {\n                console.error('取消预约错误:', _context2.t0);\n                _this2.$message.error('取消预约失败，请稍后重试');\n              }\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 9]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["data","loading","records","currentPage","total","timeSlots","created","getRecords","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userInfo","response","_response$data","wrap","_callee$","_context","prev","next","JSON","parse","localStorage","getItem","console","log","id","$message","error","$router","push","abrupt","$http","get","concat","sent","code","Array","isArray","length","message","t0","finish","stop","formatDate","date","d","Date","getFullYear","String","getMonth","padStart","getDate","getTimeSlotLabel","timeSlot","getStatusType","status","types","getStatusLabel","labels","canCancel","record","appointmentDate","handleCurrentChange","page","handleCancel","_this2","_callee2","_response$data2","_callee2$","_context2","$confirm","confirmButtonText","cancelButtonText","type","put","success"],"sources":["src/views/Records.vue"],"sourcesContent":["<template>\r\n  <div class=\"records-container\">\r\n    <h2>我的预约记录</h2>\r\n    <el-table\r\n      v-loading=\"loading\"\r\n      :data=\"records\"\r\n      style=\"width: 100%\"\r\n      border>\r\n      <el-table-column\r\n        prop=\"doctorName\"\r\n        label=\"医生姓名\"\r\n        width=\"120\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"departmentName\"\r\n        label=\"科室\"\r\n        width=\"120\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"appointmentDate\"\r\n        label=\"预约日期\"\r\n        width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          {{ formatDate(scope.row.appointmentDate) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"timeSlot\"\r\n        label=\"时间段\"\r\n        width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          {{ getTimeSlotLabel(scope.row.timeSlot) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"description\"\r\n        label=\"症状描述\"\r\n        show-overflow-tooltip>\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"status\"\r\n        label=\"状态\"\r\n        width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"getStatusType(scope.row.status)\">\r\n            {{ getStatusLabel(scope.row.status) }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        label=\"操作\"\r\n        width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button\r\n            v-if=\"canCancel(scope.row)\"\r\n            size=\"mini\"\r\n            type=\"danger\"\r\n            @click=\"handleCancel(scope.row)\">取消预约</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <div class=\"pagination-container\" v-if=\"total > 0\">\r\n      <el-pagination\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"currentPage\"\r\n        :page-size=\"10\"\r\n        layout=\"total, prev, pager, next\"\r\n        :total=\"total\">\r\n      </el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      records: [],\r\n      currentPage: 1,\r\n      total: 0,\r\n      timeSlots: {\r\n        'morning': '上午',\r\n        'afternoon': '下午',\r\n        'evening': '晚上',\r\n        '1': '上午',\r\n        '2': '下午',\r\n        '3': '晚上'\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.getRecords()\r\n  },\r\n  methods: {\r\n    async getRecords() {\r\n      this.loading = true\r\n      try {\r\n        const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')\r\n        console.log('当前用户信息:', userInfo)\r\n        \r\n        if (!userInfo.id) {\r\n          this.$message.error('请先登录')\r\n          this.$router.push('/home/login')\r\n          this.$router.push('/login')\r\n          return\r\n        }\r\n        \r\n        const response = await this.$http.get(`/api/appointments/user/${userInfo.id}`)\r\n        console.log('预约记录响应:', response)\r\n        \r\n        if (response.data && response.data.code === 200) {\r\n          if (Array.isArray(response.data.data)) {\r\n            this.records = response.data.data\r\n            this.total = this.records.length\r\n            console.log('获取到的预约记录:', this.records)\r\n          } else {\r\n            console.error('返回的数据不是数组:', response.data.data)\r\n            this.records = []\r\n            this.total = 0\r\n          }\r\n        } else {\r\n          this.$message.error(response.data?.message || '获取预约记录失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取预约记录错误:', error)\r\n        this.$message.error('获取预约记录失败，请稍后重试')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      if (!date) return ''\r\n      const d = new Date(date)\r\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`\r\n    },\r\n    getTimeSlotLabel(timeSlot) {\r\n      return this.timeSlots[timeSlot] || '未知时段'\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        0: 'info',    // 待就诊\r\n        1: 'success', // 已完成\r\n        2: 'danger'   // 已取消\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getStatusLabel(status) {\r\n      const labels = {\r\n        0: '待就诊',\r\n        1: '已完成',\r\n        2: '已取消'\r\n      }\r\n      return labels[status] || '未知状态'\r\n    },\r\n    canCancel(record) {\r\n      return record.status === 0 && new Date(record.appointmentDate) > new Date()\r\n    },\r\n    handleCurrentChange(page) {\r\n      this.currentPage = page\r\n      this.getRecords()\r\n    },\r\n    async handleCancel(record) {\r\n      try {\r\n        await this.$confirm('确认取消该预约吗？', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        \r\n        const response = await this.$http.put(`/api/appointments/${record.id}/cancel`)\r\n        if (response.data && response.data.code === 200) {\r\n          this.$message.success('取消预约成功')\r\n          this.getRecords()\r\n        } else {\r\n          this.$message.error(response.data?.message || '取消预约失败')\r\n        }\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          console.error('取消预约错误:', error)\r\n          this.$message.error('取消预约失败，请稍后重试')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.records-container {\r\n  padding: 20px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  text-align: right;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}